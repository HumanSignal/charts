apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ls-app.fullname" . }}
  labels:
    {{- include "ls-app.labels" . | nindent 4 }}
    {{- if .Values.app.labels }}
    {{- toYaml .Values.app.labels | nindent 8 }}
    {{- end }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      {{- include "ls-app.selectorLabels" . | nindent 6 }}
  {{- with .Values.app.deploymentStrategy }}
  strategy:
  {{- toYaml . | trim | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.app.annotations }}
      annotations:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      labels:
        {{- include "ls-app.selectorLabels" . | nindent 8 }}
        {{- if .Values.app.podLabels }}
        {{- toYaml .Values.app.podLabels | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ls-app.serviceAccountName" . }}
      {{- if .Values.app.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.app.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.app.automountServiceAccountToken }}
      initContainers:
        - name: db-migrations
          image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag | default .Chart.AppVersion }}"
          args: [ "label-studio-migrate" ]
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.app.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.app.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.app.initContainer.resources | nindent 12 }}
          env:
            {{- include "ls.common.envs" . | nindent 12 }}
            - name: INIT_CONTAINER
              value: "true"
            {{- if .Values.app.debug }}
            - name: DEBUG
              value: "true"
            {{- end }}
          volumeMounts:
            - mountPath: /opt/heartex/instance-data/etc
              name: opt-heartex-init
            - mountPath: /tmp
              name: tmp-dir-init
            {{- if .Values.global.pgConfig.ssl.pgSslSecretName }}
            - name: pg-ssl-certs
              mountPath: /opt/heartex/secrets/pg_certs
            {{- end }}
            {{- if .Values.global.redisConfig.ssl.redisSslSecretName }}
            - name: redis-ssl-certs
              mountPath: /opt/heartex/secrets/redis_certs
            {{- end }}
            {{- if .Values.app.extraVolumeMounts }}
              {{ toYaml .Values.app.extraVolumeMounts | nindent 12 }}
            {{- end }}
      terminationGracePeriodSeconds: {{ .Values.app.terminationGracePeriodSeconds }}
      containers:
        - name: app
          image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.app.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.app.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          args: {{-  range .Values.app.args }}
            - {{ . }}
          {{- end }}
          env:
            - name: SKIP_DB_MIGRATIONS
              value: "true"
            {{- include "ls.common.envs" . | nindent 12 }}
            {{- if .Values.app.extraEnvironmentVars -}}
            {{- range $key, $value := .Values.app.extraEnvironmentVars }}
            - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.app.extraEnvironmentSecrets -}}
            {{- range $key, $value := .Values.app.extraEnvironmentSecrets }}
            - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName }}
                  key: {{ $value.secretKey }}
            {{- end }}
            {{- end }}
            {{- if or $.Values.app.cmdWrapper $.Values.global.cmdWrapper }}
            - name: CMD_WRAPPER
              value: {{ coalesce $.Values.app.cmdWrapper $.Values.global.cmdWrapper }}
            {{- end }}
          {{- if .Values.app.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: "{{ if eq .Values.app.contextPath "/" }}{{ .Values.app.livenessProbe.path }}{{ else }}{{ .Values.app.contextPath }}{{ .Values.app.livenessProbe.path }}{{ end }}"
              port: 8000
            failureThreshold: {{ .Values.app.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.app.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.app.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.app.livenessProbe.timeoutSeconds }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command: [ '/bin/sh', '-c', 'sleep {{ .Values.app.preStopDelaySeconds }}' ]
          resources:
            {{- toYaml .Values.app.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /label-studio/data
            {{- if and .Values.global.persistence.enabled (eq .Values.global.persistence.type "gcs") }}
            {{- if or .Values.global.persistence.config.gcs.applicationCredentialsJSON (and .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey) }}
            - name: gcs-storage-credentials
              mountPath: /opt/heartex/secrets/gcs
              readOnly: true
            {{- end }}
            {{- end }}
            {{- if .Values.global.pgConfig.ssl.pgSslSecretName }}
            - name: pg-ssl-certs
              mountPath: /opt/heartex/secrets/pg_certs
            {{- end }}
            {{- if .Values.global.redisConfig.ssl.redisSslSecretName }}
            - name: redis-ssl-certs
              mountPath: /opt/heartex/secrets/redis_certs
            {{- end }}
            {{- if .Values.app.extraVolumeMounts }}
              {{ toYaml .Values.app.extraVolumeMounts | nindent 12 }}
            {{- end }}
            - mountPath: /opt/heartex/instance-data/etc
              name: opt-heartex-app
            - mountPath: /tmp
              name: tmp-dir-app
          {{- if .Values.metrics.enabled }}
          ports:
            - name: "djangometrics"
              containerPort: 8000
          {{- end }}
        - name: nginx
          image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.app.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.app.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          args: {{-  range .Values.app.nginx.args }}
            - {{ . }}
          {{- end }}
          env:
            - name: APP_HOST
              value: localhost
            {{- include "ls.common.envs" . | nindent 12}}
            {{- if .Values.app.nginx.extraEnvironmentVars -}}
            {{- range $key, $value := .Values.app.nginx.extraEnvironmentVars }}
            - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.app.nginx.extraEnvironmentSecrets -}}
            {{- range $key, $value := .Values.app.nginx.extraEnvironmentSecrets }}
            - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName }}
                  key: {{ $value.secretKey }}
            {{- end }}
            {{- end }}
          ports:
            - name: {{ .Values.app.service.portName }}
              containerPort: 8085
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: [ '/bin/sh', '-c', 'sleep {{ .Values.app.preStopDelaySeconds }}' ]
          {{- if .Values.app.nginx.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: "{{ if eq .Values.app.contextPath "/" }}{{ .Values.app.readinessProbe.path }}{{ else }}{{ .Values.app.contextPath }}{{ .Values.app.readinessProbe.path }}{{ end }}"
              port: 8085
            failureThreshold: {{ .Values.app.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.app.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.app.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.app.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.app.nginx.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: "{{ .Values.app.nginx.livenessProbe.path }}"
              port: 8085
            failureThreshold: {{ .Values.app.nginx.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.app.nginx.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.nginx.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.app.nginx.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.app.nginx.livenessProbe.timeoutSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.app.nginx.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /label-studio/data
            {{- if .Values.app.extraVolumeMounts }}
              {{ toYaml .Values.app.extraVolumeMounts | nindent 12 }}
            {{- end }}
            - mountPath: /opt/heartex/instance-data/etc
              name: opt-heartex-nginx
            - mountPath: /tmp
              name: tmp-dir-nginx
        {{- if and .Values.metrics.enabled .Values.metrics.uwsgiExporter.enabled }}
        - name: uwsgi-exporter
          image: "{{ .Values.metrics.uwsgiExporter.image.repository }}:{{ .Values.metrics.uwsgiExporter.image.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.metrics.uwsgiExporter.image.pullPolicy }}
          {{- if .Values.metrics.uwsgiExporter.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.metrics.uwsgiExporter.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          args:
            - "--stats.uri=http://localhost:1717"
          {{- if .Values.metrics.uwsgiExporter.resources }}
          resources: {{- toYaml .Values.metrics.uwsgiExporter.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.metrics.uwsgiExporter.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: "{{ .Values.metrics.uwsgiExporter.readinessProbe.httpGet.path }}"
              port: "{{ .Values.metrics.uwsgiExporter.readinessProbe.httpGet.port }}"
            failureThreshold: {{ .Values.metrics.uwsgiExporter.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.metrics.uwsgiExporter.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.metrics.uwsgiExporter.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.metrics.uwsgiExporter.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.metrics.uwsgiExporter.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.metrics.uwsgiExporter.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: "{{ .Values.metrics.uwsgiExporter.livenessProbe.httpGet.path }}"
              port: "{{ .Values.metrics.uwsgiExporter.livenessProbe.httpGet.port }}"
            failureThreshold: {{ .Values.metrics.uwsgiExporter.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.metrics.uwsgiExporter.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.metrics.uwsgiExporter.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.metrics.uwsgiExporter.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.metrics.uwsgiExporter.livenessProbe.timeoutSeconds }}
          {{- end }}
          ports:
            - name: "uwsgimetrics"
              containerPort: 9117
          {{- end }}
      {{- with .Values.app.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.app.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "tplvalues.render" (dict "value" .Values.app.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.app.dnsPolicy }}
      dnsPolicy: {{ .Values.app.dnsPolicy }}
      {{- end }}
      {{- if .Values.app.enableServiceLinks }}
      enableServiceLinks: {{ .Values.app.enableServiceLinks }}
      {{- end }}
      {{- if .Values.app.shareProcessNamespace }}
      shareProcessNamespace: {{ .Values.app.shareProcessNamespace }}
      {{- end }}
      {{- with .Values.app.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.app.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: data
          {{- if and .Values.global.persistence.enabled (eq .Values.global.persistence.type "volume") }}
          persistentVolumeClaim:
            claimName: {{ include "ls-pvc.claimName" . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if and .Values.global.persistence.enabled (eq .Values.global.persistence.type "gcs") }}
        {{- if or .Values.global.persistence.config.gcs.applicationCredentialsJSON (and .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey) }}
        - name: gcs-storage-credentials
          secret:
            {{- if and .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey }}
            secretName: {{ .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret }}
            {{- else }}
            secretName: {{ include "ls-secrets.fullname" . }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.global.pgConfig.ssl.pgSslSecretName }}
        - name: pg-ssl-certs
          secret:
            secretName: {{ .Values.global.pgConfig.ssl.pgSslSecretName }}
            defaultMode: 0640
        {{- end }}
        {{- if .Values.global.redisConfig.ssl.redisSslSecretName }}
        - name: redis-ssl-certs
          secret:
            secretName: {{ .Values.global.redisConfig.ssl.redisSslSecretName  }}
            defaultMode: 0640
        {{- end }}
        {{- if .Values.app.extraVolumes -}}
          {{- toYaml .Values.app.extraVolumes | nindent 8 }}
        {{- end }}
        - name: opt-heartex-app
          emptyDir: {}
        - name: opt-heartex-nginx
          emptyDir: {}
        - name: opt-heartex-init
          emptyDir: {}
        - name: tmp-dir-app
          emptyDir: {}
        - name: tmp-dir-nginx
          emptyDir: {}
        - name: tmp-dir-init
          emptyDir: {}
