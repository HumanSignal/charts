{{- if and .Values.cronjob.enabled -}}
{{- range $cronjob_name, $val := .Values.cronjob.jobs }}
---
apiVersion: {{ include "capabilities.cronjob.apiVersion" $ }}
kind: CronJob
metadata:
  name: {{ include "ls-app.fullname" $ }}-{{ replace "_" "-" $cronjob_name }}
  labels:
    {{- include "ls-app.labels" $ | nindent 4 }}
spec:
  successfulJobsHistoryLimit: {{ default 3 $val.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ default 1 $val.failedJobsHistoryLimit }}
  schedule: "{{ $val.schedule }}"
  concurrencyPolicy: {{ $val.concurrencyPolicy }}
  jobTemplate:
    spec:
      backoffLimit: {{ $val.backoffLimit }}
      template:
        metadata:
          {{- with $.Values.cronjob.annotations }}
          annotations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          labels:
            {{- include "ls-app.selectorLabels" $ | nindent 12 }}
        spec:
          {{- with $.Values.global.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          serviceAccountName: {{ include "ls-app.serviceAccountName" $ }}
          {{- if $.Values.app.podSecurityContext.enabled }}
          securityContext: {{- omit $.Values.app.podSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          restartPolicy: {{ $val.restartPolicy }}
          automountServiceAccountToken: {{ $.Values.app.automountServiceAccountToken }}
          containers:
            - name: job
              image: "{{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag | default $.Chart.AppVersion }}"
              imagePullPolicy: {{ $.Values.global.image.pullPolicy }}
              {{- if $.Values.app.containerSecurityContext.enabled }}
              securityContext: {{- omit $.Values.app.containerSecurityContext "enabled" | toYaml | nindent 16 }}
              {{- end }}
              args: {{-  range $val.args }}
                - {{ . }}
              {{- end }}
              env:
                - name: SKIP_DB_MIGRATIONS
                  value: "true"
                {{- include "ls.common.envs" $ | nindent 16 }}
                {{- if $val.extraEnvironmentVars -}}
                {{- range $key, $value := $val.extraEnvironmentVars }}
                - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
                  value: {{ $value | quote }}
                {{- end }}
                {{- end }}
                {{- if $val.extraEnvironmentSecrets -}}
                {{- range $key, $value := $val.extraEnvironmentSecrets }}
                - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ $value.secretName }}
                      key: {{ $value.secretKey }}
                {{- end }}
                {{- end }}
              volumeMounts:
                - name: data
                  mountPath: /label-studio/data
                {{- if and $.Values.global.persistence.enabled (eq $.Values.global.persistence.type "gcs") }}
                {{- if or $.Values.global.persistence.config.gcs.applicationCredentialsJSON (and $.Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret $.Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey) }}
                - name: gcs-storage-credentials
                  mountPath: /opt/heartex/secrets/gcs
                  readOnly: true
                {{- end }}
                {{- end }}
                {{- if $.Values.global.pgConfig.ssl.pgSslSecretName }}
                - name: pg-ssl-certs
                  mountPath: /opt/heartex/secrets/pg_certs
                {{- end }}
                {{- if $.Values.global.redisConfig.ssl.redisSslSecretName }}
                - name: redis-ssl-certs
                  mountPath: /opt/heartex/secrets/redis_certs
                {{- end }}
                {{- if $.Values.app.extraVolumeMounts }}
                  {{ toYaml $.Values.app.extraVolumeMounts | nindent 16 }}
                {{- end }}
                {{- if $val.extraVolumeMounts }}
                  {{ toYaml $val.extraVolumeMounts | nindent 12 }}
                {{- end }}
                - mountPath: /opt/heartex/instance-data/etc
                  name: opt-heartex-job
                - mountPath: /tmp
                  name: tmp-dir-job
          {{- with $.Values.app.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if $.Values.app.topologySpreadConstraints }}
          topologySpreadConstraints: {{- include "tplvalues.render" (dict "value" $.Values.app.topologySpreadConstraints "context" $) | nindent 8 }}
          {{- end }}
          {{- if $.Values.app.dnsPolicy }}
          dnsPolicy: {{ $.Values.app.dnsPolicy }}
          {{- end }}
          {{- if $.Values.app.enableServiceLinks }}
          enableServiceLinks: {{ $.Values.app.enableServiceLinks }}
          {{- end }}
          {{- if $.Values.app.shareProcessNamespace }}
          shareProcessNamespace: {{ $.Values.app.shareProcessNamespace }}
          {{- end }}
          {{- with $.Values.app.affinity }}
          affinity:
            {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with $.Values.app.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumes:
            - name: data
              {{- if and $.Values.global.persistence.enabled (eq $.Values.global.persistence.type "volume") }}
              persistentVolumeClaim:
                claimName: {{ include "ls-pvc.claimName" $ }}
              {{- else }}
              emptyDir: {}
              {{- end }}
            {{- if and $.Values.global.persistence.enabled (eq $.Values.global.persistence.type "gcs") }}
            {{- if or $.Values.global.persistence.config.gcs.applicationCredentialsJSON (and $.Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret $.Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey) }}
            - name: gcs-storage-credentials
              secret:
                {{- if and $.Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret $.Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey }}
                secretName: {{ $.Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret }}
                {{- else }}
                secretName: {{ include "ls-secrets.fullname" $ }}
                {{- end }}
            {{- end }}
            {{- end }}
            {{- if $.Values.global.pgConfig.ssl.pgSslSecretName }}
            - name: pg-ssl-certs
              secret:
                secretName: {{ $.Values.global.pgConfig.ssl.pgSslSecretName }}
                defaultMode: 0640
            {{- end }}
            {{- if $.Values.global.redisConfig.ssl.redisSslSecretName }}
            - name: redis-ssl-certs
              secret:
                secretName: {{ $.Values.global.redisConfig.ssl.redisSslSecretName  }}
                defaultMode: 0640
            {{- end }}
            {{- if $.Values.app.extraVolumes -}}
              {{- toYaml $.Values.app.extraVolumes | nindent 12 }}
            {{- end }}
            {{- if $val.extraVolumes -}}
              {{- toYaml $val.extraVolumes | nindent 8 }}
            {{- end }}
            - name: opt-heartex-job
              emptyDir: {}
            - name: tmp-dir-job
              emptyDir: {}
{{- end }}
{{- end }}