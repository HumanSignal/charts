{{- if .Values.migrationJob.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ls-app.fullname" . }}-migrate
  labels:
    {{- include "ls-app.labels" . | nindent 4 }}
    {{- if .Values.app.labels }}
    {{- toYaml .Values.app.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.migrationJob.annotations }}
  annotations:
    {{- toYaml .Values.migrationJob.annotations | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.migrationJob.backoffLimit }}
  backoffLimit: {{ .Values.migrationJob.backoffLimit }}
  {{- end }}
  template:
    spec:
      {{- if .Values.app.serviceAccount.create }}
      serviceAccountName: {{ include "ls-app.serviceAccountName" . }}
      {{- end }}
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.app.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.app.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.app.affinity }}
      affinity:
        {{- toYaml .Values.app.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.app.tolerations }}
      tolerations:
        {{- toYaml .Values.app.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.app.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.app.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.app.automountServiceAccountToken }}
      dnsPolicy: {{ .Values.app.dnsPolicy }}
      enableServiceLinks: {{ .Values.app.enableServiceLinks }}
      shareProcessNamespace: {{ .Values.app.shareProcessNamespace }}
      {{- if .Values.app.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "tplvalues.render" (dict "value" .Values.app.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      containers:
        - name: db-migrations
          image: "{{ .Values.global.image.registry | default "docker.io" }}/{{ .Values.global.image.repository }}:{{ .Values.global.image.tag | default .Chart.AppVersion }}"
          args: [ "label-studio-migrate" ]
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.app.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.app.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.app.initContainer.resources | nindent 12 }}
          env:
            {{- include "ls.common.envs" $ | nindent 12 }}
            - name: INIT_CONTAINER
              value: "true"
            {{- if .Values.app.extraEnvironmentVars -}}
            {{- range $key, $value := .Values.app.extraEnvironmentVars }}
            - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.app.extraEnvironmentSecrets -}}
            {{- range $key, $value := .Values.app.extraEnvironmentSecrets }}
            - name: {{ printf "%s" $key | replace "." "_" | upper | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName }}
                  key: {{ $value.secretKey }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /label-studio/data
            - mountPath: /opt/heartex/instance-data/etc
              name: opt-heartex-init
            - mountPath: /tmp
              name: tmp-dir-init
            {{- if .Values.global.pgConfig.ssl.pgSslSecretName }}
            - name: pg-ssl-certs
              mountPath: /opt/heartex/secrets/pg_certs
            {{- end }}
            {{- if .Values.global.redisConfig.ssl.redisSslSecretName }}
            - name: redis-ssl-certs
              mountPath: /opt/heartex/secrets/redis_certs
            {{- end }}
            {{- if .Values.app.extraVolumeMounts }}
              {{ toYaml .Values.app.extraVolumeMounts | nindent 12 }}
            {{- end }}
        {{- if .Values.migrationJob.postMigrationInitContainers }}
        {{- range .Values.migrationJob.postMigrationInitContainers }}
        - name: {{ .name }}
          image: {{ or .image (printf "%s/%s:%s" ($.Values.global.image.registry | default "docker.io") $.Values.global.image.repository $.Values.global.image.tag) ($.Chart.AppVersion) }}
          args: {{- range .args }}
            - {{ . }}
          {{- end }}
          imagePullPolicy: {{ or .pullPolicy $.Values.global.image.pullPolicy }}
          {{- if .restartPolicy }}
          restartPolicy: {{ .restartPolicy }}
          {{- end }}
          {{- if $.Values.app.containerSecurityContext.enabled }}
          securityContext: {{- omit $.Values.app.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            {{- include "ls.common.envs" $ | nindent 12 }}
            - name: INIT_CONTAINER
              value: "true"
          volumeMounts:
            - name: data
              mountPath: /label-studio/data
            - mountPath: /opt/heartex/instance-data/etc
              name: opt-heartex-init
            - mountPath: /tmp
              name: tmp-dir-init
            {{- if $.Values.global.pgConfig.ssl.pgSslSecretName }}
            - name: pg-ssl-certs
              mountPath: /opt/heartex/secrets/pg_certs
            {{- end }}
            {{- if $.Values.global.redisConfig.ssl.redisSslSecretName }}
            - name: redis-ssl-certs
              mountPath: /opt/heartex/secrets/redis_certs
            {{- end }}
            {{- if .extraVolumeMounts }}
              {{ toYaml .extraVolumeMounts | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- end }}
      volumes:
        - name: data
          {{- if and .Values.global.persistence.enabled (eq .Values.global.persistence.type "volume") }}
          persistentVolumeClaim:
            claimName: {{ include "ls-pvc.claimName" . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if and .Values.global.persistence.enabled (eq .Values.global.persistence.type "gcs") }}
        {{- if or .Values.global.persistence.config.gcs.applicationCredentialsJSON (and .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey) }}
        - name: gcs-storage-credentials
          secret:
            {{- if and .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecretKey }}
            secretName: {{ .Values.global.persistence.config.gcs.applicationCredentialsJSONExistingSecret }}
            {{- else }}
            secretName: {{ include "ls-secrets.fullname" . }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.global.pgConfig.ssl.pgSslSecretName }}
        - name: pg-ssl-certs
          secret:
            secretName: {{ include "render-values" ( dict "value" .Values.global.pgConfig.ssl.pgSslSecretName "context" $) }}
            defaultMode: 0640
        {{- end }}
        {{- if .Values.global.redisConfig.ssl.redisSslSecretName }}
        - name: redis-ssl-certs
          secret:
            secretName: {{ include "render-values" ( dict "value" .Values.global.redisConfig.ssl.redisSslSecretName "context" $) }}
            defaultMode: 0640
        {{- end }}
        {{- if .Values.app.extraVolumes -}}
          {{- toYaml .Values.app.extraVolumes | nindent 8 }}
        {{- end }}
        - name: opt-heartex-app
          emptyDir: { }
        - name: opt-heartex-nginx
          emptyDir: { }
        - name: opt-heartex-init
          emptyDir: { }
        - name: tmp-dir-app
          emptyDir: { }
        - name: tmp-dir-nginx
          emptyDir: { }
        - name: tmp-dir-init
          emptyDir: { }
{{- end }}
